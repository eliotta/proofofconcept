






	                                            
       // to build and initialize a 5 x 5 array
	Clockarry[][] fivebyfive = new Clockarry[5][5];
	for(int i = 0; i < 5; i++)
	{
	  for(int j = 0; j < 5; j++)
	 {
	   fivebyfive[i][j] = new Clockarry();	
	   fivebyfive[i][j].setcXpos(i);
           fivebyfive[i][j].setcYpos(y);		
	 }		   	
	}
		                                           
       // to set a flag when the clock is created, at each of the 5 top cells.   
  	for(int i = 0; i < 5; i++)
	{
 	  fivebyfive[i][0].setorbitflag(i);		   	
	}	         	                                           
       
       // to create  a pull array.
	clockarry[] pullarry = new clockarry[5] 
	for(int i = 0; i < 5; i++)
	[
	  pullarry[i] = new clockarry;
	  pullarry = fivebyfive[i][0];
	  pullarry.setdupflag('N');
	]


	// set the flag, based on whether or not there is a duplicate. 
	for(int y = 0; y < 5; y++)
	{
	  if (fivebyfive[0][y].getcYpos() = pullarry[y].getcYpos())
	  {
	     pullarry[y].setdupcheck('Y'); 
	  } 
	}    		  

           

       // to check the pull array for flags. 
        char thereisadupe = 'N';
	for(int y = 0; y < 5; y++)
	{
	  if (fivebyfive[0][y].getcYpos() = pullarry[y].getcYpos())
	  {
	     thereisadup = 'Y';
	  } 
	}    		  

       
	If(thereisadup = 'Y')
	{
	  //move the clock		
	}
	//reset the flags
		for(int y = 0; y < 5; y++)
	{
	   pullarry[y].setdupcheck('N'); 
	}
		
	 //find another way to do a vertical check
	 // Create (5) horizontal arrays on the fly, the same way the vertical arrays were created. 
	 // after new, possible to set an object equal to an equivalent object. 
	//load up the array to be compared. accross the top
	Clockarry pullarry  = new Clockarray[5];
	Clockarry temp_horizontal  = new Clockarray[5];
           for(int x = 0; i < 5; i++)
	   {
	    pullarry[x] = new Clockarry();
            pullarry[x] =  fivebyfive[x][0]; 		   	
	   }
 	

        //compare the loaded pullary to a succession of horizontal arrays.
	//if this doesnt work, will give the 5 values an index number, and just compare those. 
	Clockarry comparry  = new Clockarray[5];
	 for(int y = 1; y < tablelength; y++)
	 {
    	  for(int x = 0; i < 5; i++)//load up the row to be compared. 
	   {
	    comparry[x] = new Clockarry();
            comparry[x] =  fivebyfive[x][y]; 		   	
	   }
	    if(comparry == pullarry) {
		read next clock value
	    else
	        add this clock value to output}		       	
	  } 

       // to recomend moving the clock, if the pull flag is  set. 
       // Before a clock is moved, the following have to be checked. 
	// - globalflag, dupflag, hdupflag 
	//before the clock can move, all three flags have to be checked. 
	    if(orbitflag = 'N' AND dupcheck = 'N' AND hdupcheck = 'N';)
		{
		  ok to move clock one place
		}
		clockarry[] pullarry = new clockarry[5];
		 			
	
       // to move one wheel in the array from bottom to top. 
       //-vertical array.
       //-start with the top. 
       //-adjust everything in the vertical column relative to the top cell. 
       //-if the cell is flaged as the top cell the program started with, the next cell is 1. 
       //-if the cell is not the top cell, the next cell is + 1.
       //-the vertical cells will be built first populating the y value for the five array indicators, 
       //-than by populating the actual cell. 
	


       // to check if the array has hit the top flag. 
       If the move has hit the top flag,  keep going to 1. Move the wheel 1 to the left over. 
       If the move cause 1 wheel over to hit the top flag, repeat for the next wheels over.

       // to check all five top array cells. If all flipped. Done. 
       // to check for vertical duplicates. turn to int. sort. dup check. 
       // to pull an array if its original and non dupped, and ad it to the stack.   


   
	

	//815 beginning

	There are two flags in a clock array cell. One is for marking when a rotor is complete. Itgets reset when rotor 
	to the left advances by 1. 

	The second flag gets set across the top array, and is checked for when all five objects are reached agains. 
	The flags in the second array are never reset. When the array is reached, the pull is in every order possible. 
	The function is over. 

	Loop until reach all five flags in the second array. The clocking is done, beginning on the left. So all five flags 
	do not have to be checked each and every time the clock is changed.  Just when the left most flag
	is a five. 

	The rotors move up, with the numbers increasing with each turn, like the mechanical digits of a clock. 

	After each turn, clock object is checked for the first of the two flags. If the first of the two flags is not turned, 
	that means the object was not the starting object,  and the first of several checks is passed. 

	The next check is the second flag check. If the first flag wasn't turned, the second flag isn't turned either.
	If the first flag was turned, the second flags are checked, starting with the leftmost most flag. and moving right.   

	The next check is the check for internal duplicates. Across the five horizontall objects, the objects may well be 
	repeated more than once. If this is not the case, the program moves to the next check. 

	The next check is the check for external duplicates. The entire top row of objects are gathered into an array, 
	and are written to the group of already accepted arrays. If the newly created array doesn't match any of the already 
	accepted arrays, the program can move on to the next process.  The array becomes a hash, and thats how the numbers get checked? Maybe . . capitalCities.get("England");

	// Using Arrays.toString()
   	 public static String convertArrayToString(String[] strArray) {
        return Arrays.toString(strArray);
    	}













 
