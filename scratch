Overview of what needs to be running in the project. 

create a separate package for what was already done, and a package for new stuff. 

What is the overview? 
build the 52 object input. 
build a description to display 
of what the program is doy

build the five tables. 
buid the five patterns. 
build the clock. 
build the five character array used to create the first row of the clock. 




 clockarray toprow = new clockarray();
        clockarrayclass[][] trow = new clockarrayclass[1][5]; 
        trow =  toprow.initclockarray(1,5);
        
        //-copy pulls into top row array. 
        //-fill in location an other pieces of top row array. 
        //-fill in each column, based on the top row, which is the top of each column
        //-the positions of the clock objects in the clockarray don't change,
        //-what the clockobjects in the clockarray represents is what changes. 
        //-A function decides which clock object is to be populated. 
        //-the new clock cell is populated with the new values
        //-There are five possible pulls. A function chooses which of the five it will be, for each new clock object
        
        
        
        /*7/30
        notes. pull objects one thru five. 
        Array isn't keyed. 
        Y variable acts as an index. 
        X variable is filled witha  zero, and the resulting object is copied to to the clock. 
        But first, a series of functions. 
        - function to initialize the approx 5 x 5 objects. 
        - function that numbers the 5 x 5 objects are dealt with, one vertical row at a time, starting with the rightmost
          column.  The function counts up to five. When it gets to five. It starts overs. 
        - ends up with what looks like a table of 25 values. 5 by 5. No classes, just the Y values to be 
          filled in later. 
        - From right to left. works like a clock. Function moves each number from top to bottom, until it gets to the 
          last number. 
        - Function flags all the objects in the top row. In this case, its five opjects. When the 
          the program circles back around to all five objects in the top row, the program is done. 
        - Function checks for duplicates. First from right to left. All five objects are written to a 
          separate array with a flag set to 'N' After a column is changed, all the objects in the clock
          are checked against the array. The flags in the array are changed with each complete change of the 
          clock. When a number is found in the top array of the clock, the array equivalent is set to 'Y'. 
          If the array is already a 'Y', its a duplicate. 
        - Function checks for duplicates. Second. Each row becomes a number, which are then sorted, and
          duplicates are eliminated. 
          
        
        
        
        
        
        */
        
        
        
